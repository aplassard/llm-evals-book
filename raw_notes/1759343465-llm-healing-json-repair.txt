Okay, so I want to talk about L-L-M healing at this point, and I'm not sure how
why it's correct with the concept.
This is, so you have to go a little bit of digging, both into the concept, and you
have to look more general idea, but the idea behind it is what L, I'm
taking your response, and I'm not forced into a structure format, and there's a lot of
way to wish they can fail, or do things that are silly or wrong, or whatever, and the idea
of L-L-M healing is instead of trying to build out structured logic to handle every possible
scenario, but the L-M might do.
We instead, like using L-M to corrupt errors, so the work flow that I've used in the past,
is the L-M creates a response.
We attempt to parse it as Jason, matching our format, or whatever, if it fails, we then
pass the expected format, pass the response that we have to go get, and then respond
parsed in the error as well, to the L-M healer to have it correct the formatting error.
Then return just the correct code or correct format result at the end, and so that's the
idea of L-M healing.
The idea is like, let me just do like a formatting thing, when we're expecting there's not
response to be like an absolute particular JSON format, or whatever, then the healing
will then fix the underlying issue and correct it for us, so without having to try to parse it
in every possible, it's a magical way, because that's kind of just going to whack them all.
So that is the idea of L-M healing, and if you're going to have this just as an aside in the
chapter, I can try to come up with like an example of this actually working or not, but we will
see if we can make it with it and pull it off, but yeah, just having to get an example of this
brief aside, we'll be a cool thing to include.
